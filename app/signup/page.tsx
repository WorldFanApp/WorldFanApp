"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Image from "next/image"
import Link from "next/link"
import { IDKitWidget, VerificationLevel, ISuccessResult } from "@worldcoin/idkit"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { LocationForm } from "@/components/location-form"
import { MusicPreferencesForm } from "@/components/music-preferences-form"
import { NotificationPreferencesForm } from "@/components/notification-preferences-form"
import { Progress } from "@/components/ui/progress"
// import { CheckCircle } from "lucide-react" // No longer used
import { Alert, AlertDescription } from "@/components/ui/alert" // Keep for worldIdError display

const steps = [
  { id: "location", title: "Location" },
  { id: "music-preferences", title: "Music Preferences" },
  { id: "notification-preferences", title: "Notification Preferences" },
]

export default function SignupPage() {
  const [currentStep, setCurrentStep] = useState(0)
  const [userData, setUserData] = useState({
    country: "",
    city: "",
    artists: [] as string[], // Explicitly type artists
    genres: [] as string[],  // Explicitly type genres
    createAccount: false,
    email: "",
    phone: "",
    username: "",
  })
  const router = useRouter()

  const [isWorldIdVerified, setIsWorldIdVerified] = useState(false)
  const [worldIdError, setWorldIdError] = useState("")
  const [worldIdNullifierHash, setWorldIdNullifierHash] = useState<string | null>(null)

  // useEffect(() => {
  //   // If not authenticated, redirect to home
  //   // This logic is removed to allow World ID verification first
  //   // if (status === "unauthenticated") {
  //   //   router.push("/")
  //   // }
  // }, [status, router])

  const progress = ((currentStep + 1) / steps.length) * 100

  const handleVerifyProof = async (proof: ISuccessResult) => {
    setWorldIdError("") // Clear previous errors
    try {
      const response = await fetch("/api/verify-world-id", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          merkle_root: proof.merkle_root,
          nullifier_hash: proof.nullifier_hash,
          proof: proof.proof,
          signal: "signupSingal", // Must match signal in IDKitWidget
          credential_type: proof.credential_type, // Pass credential_type
        }),
      })

      const data = await response.json()

      if (response.ok && data.success) {
        setIsWorldIdVerified(true)
        setWorldIdNullifierHash(proof.nullifier_hash)
        console.log("World ID Verification Successful:", data)
      } else {
        setIsWorldIdVerified(false)
        setWorldIdError(data.error || data.detail || "Verification failed. Please try again.")
        console.error("World ID Verification Failed:", data)
      }
    } catch (error) {
      setIsWorldIdVerified(false)
      setWorldIdError("An error occurred during verification. Please try again.")
      console.error("Error verifying World ID:", error)
    }
  }

  const onSuccessWorldId = () => {
    // This is called after the proof is generated by IDKit, before handleVerifyProof
    console.log("Proof generated by IDKit, proceeding to backend verification.")
  }

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
      window.scrollTo(0, 0)
    } else {
      // Save data and redirect to dashboard
      const userDataToSave = {
        ...userData,
        isWorldIdVerified: true,
        worldIdNullifierHash: worldIdNullifierHash,
        // email and username are already in userData from the form
      }
      localStorage.setItem("userData", JSON.stringify(userDataToSave))
      router.push("/dashboard")
    }
  }

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
      window.scrollTo(0, 0)
    }
  }

  const updateUserData = (data: Partial<typeof userData>) => {
    setUserData({ ...userData, ...data })
  }

  return (
    <div className="container max-w-4xl py-10">
      <div className="mb-8 flex items-center justify-between">
        <Link href="/" className="flex items-center gap-2">
          <Image src="/placeholder.svg?height=32&width=32&query=world%20logo" alt="World Logo" width={32} height={32} />
          <span className="text-xl font-bold">World Music</span>
        </Link>
      </div>

      <div className="mb-8">
        <h1 className="text-3xl font-bold">Sign Up</h1>
        <p className="text-muted-foreground">
          {isWorldIdVerified ? "Complete the steps below to create your account" : "Verify with World ID to continue"}
        </p>
      </div>

      {!isWorldIdVerified ? (
        <div className="flex flex-col items-center justify-center text-center">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>Verify Your Identity</CardTitle>
              <CardDescription>Please verify with World ID to proceed with the signup.</CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col items-center">
              <IDKitWidget
                app_id="app_7a9639a92f85fcf27213f982eddb5064" // Must be an app set up to use Success results
                action="worldfansignup"
                signal="signupSingal" // The signal that will be verified on-chain
                handleVerify={handleVerifyProof}
                onSuccess={onSuccessWorldId} // Callback when user has successfully proven their identity
                verification_level={VerificationLevel.Orb} // Or Orb if an Orb-verified app_id is configured
              >
                {({ open }) => 
                  <Button onClick={open} className="w-full">Verify with World ID</Button>
                }
              </IDKitWidget>
              {worldIdError && (
                <Alert variant="destructive" className="mt-4 w-full">
                  <AlertDescription>{worldIdError}</AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>
        </div>
      ) : (
        <>
          <div className="mb-6 bg-green-50 border-green-200 p-4 rounded-md">
            <AlertDescription className="text-green-800 flex items-center justify-between w-full">
              <span>World ID Verified! Nullifier: {worldIdNullifierHash?.substring(0,15)}...</span>
            </AlertDescription>
          </div>

          <div className="mb-8">
            <div className="flex justify-between mb-2">
              {steps.map((step, index) => (
                <div
                  key={step.id}
                  className={`text-sm ${index <= currentStep ? "text-primary font-medium" : "text-muted-foreground"}`}
                >
                  {step.title}
                </div>
              ))}
            </div>
            <Progress value={progress} className="h-2" />
          </div>

          <Card>
            <CardHeader>
              <CardTitle>{steps[currentStep].title}</CardTitle>
              <CardDescription>
                {currentStep === 0 && "Tell us where you're from"}
                {currentStep === 1 && "Share your music preferences"}
                {currentStep === 2 && "Set up your notification preferences"}
              </CardDescription>
            </CardHeader>
            <CardContent>
              {currentStep === 0 && <LocationForm userData={userData} updateUserData={updateUserData} />}
              {currentStep === 1 && <MusicPreferencesForm userData={userData} updateUserData={updateUserData} />}
              {currentStep === 2 && <NotificationPreferencesForm userData={userData} updateUserData={updateUserData} />}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" onClick={handleBack} disabled={currentStep === 0}>
                Back
              </Button>
              <Button
                onClick={handleNext}
                disabled={
                  (currentStep === 0 && (!userData.country || !userData.city)) ||
                  (currentStep === 1 && (!userData.artists.length || !userData.genres.length)) ||
                  (currentStep === 2 && (!userData.email && !userData.phone && userData.createAccount)) // Example: disable if createAccount is true but no email/phone
                }
              >
                {currentStep < steps.length - 1 ? "Next" : "Complete"}
              </Button>
            </CardFooter>
          </Card>
        </>
      )}
    </div>
  )
}
